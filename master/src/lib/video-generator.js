// This file is used server-side only
'use server';

import fs from 'fs';
import path from 'path';
import { exec } from 'child_process';
import { promisify } from 'util';

const execPromise = promisify(exec);

// Helper function to summarize text using our tool
async function summarizeWithTool(text, maxLength = 280) {
  try {
    // Import the summarizeText tool
    const { default: summarizeToolFunctions } = await import('../ollama/tools/summarizeText');
    if (!summarizeToolFunctions || !summarizeToolFunctions.length) {
      console.warn('Summarize tool not available, using original text');
      return text;
    }
    
    // Get the execute function from the first tool
    const summarizeTool = summarizeToolFunctions[0];
    
    // Call the execute function with the text
    const result = await summarizeTool.execute({ text, maxLength });
    
    // If there was an error or no summary was generated, return the original
    if (result.error || !result.summary) {
      console.warn('Text summarization failed:', result.error);
      return text;
    }
    
    console.log(`Text summarized: ${result.originalLength} â†’ ${result.summaryLength} chars`);
    return result.summary;
  } catch (error) {
    console.error('Error summarizing text:', error);
    return text; // Fall back to original text
  }
}

// Server-side video generation function using the existing script
export async function generateVideo(text, useSummarization = false) {
  try {
    // Process text - summarize if requested
    let processedText = text;
    if (useSummarization) {
      console.log('Summarizing text before video generation...');
      processedText = await summarizeWithTool(text);
    }
    
    // Handle the case where the prefix might be missing
    const textWithPrefix = processedText.toLowerCase().startsWith('text to brainrot:') 
      ? processedText 
      : `Text to Brainrot: ${processedText}`;
    
    // Get the path to the generateBrainRotVideo.js script
    const rootDir = process.cwd();
    const scriptDir = path.join(rootDir, 'src', 'ollama', 'tools');
    const scriptPath = path.join(scriptDir, 'generateBrainRotVideo.js');
    
    if (!fs.existsSync(scriptPath)) {
      throw new Error(`Script not found at ${scriptPath}`);
    }
    
    // Make sure output directory exists
    const outputDir = path.join(rootDir, 'public', 'videos');
    fs.mkdirSync(outputDir, { recursive: true });
    
    // Create a unique output filename
    const timestamp = Date.now();
    const outputFileName = `brainrot_${timestamp}.mp4`;
    const outputPath = path.join(outputDir, outputFileName);
    
    // Prepare command to run the script
    // Important: Run the command in the script's directory for relative paths to work
    const safeText = textWithPrefix.replace(/"/g, '\\"');
    const command = `cd "${scriptDir}" && node generateBrainRotVideo.js "${safeText}"`;
    
    console.log(`Running command: ${command}`);
    
    // Execute the generateBrainRotVideo.js script directly
    const { stdout, stderr } = await execPromise(command);
    
    if (stderr && !stderr.includes('Debugger attached')) {
      console.error('Script errors:', stderr);
    }
    
    console.log('Script output:', stdout);
    
    // Check if the script generated the video - use the correct path relative to the script directory
    const toolsOutputPath = path.join(scriptDir, 'output', 'final.mp4');
    
    if (!fs.existsSync(toolsOutputPath)) {
      throw new Error('Video file not generated by the script');
    }
    
    // Copy the file to the public directory with our unique name
    fs.copyFileSync(toolsOutputPath, outputPath);
    console.log(`Copied video to public directory: ${outputPath}`);
    
    // Return the public URL that the frontend can use
    const publicUrl = `/videos/${outputFileName}`;
    return {
      outputPath,
      publicUrl,
      summarized: useSummarization
    };
  } catch (error) {
    console.error('Error generating video:', error);
    throw error;
  }
}